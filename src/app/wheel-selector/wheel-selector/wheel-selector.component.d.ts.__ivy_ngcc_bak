import { OnInit, AfterViewInit, OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { SelectorModel } from './wheel-selector.models';
export { SelectorModel as PickerDataModel };
export declare class WheelSelectorComponent implements OnInit, AfterViewInit, OnDestroy {
    pickerGroupLayer: any;
    pickerHandleLayer: any;
    data: SelectorModel[];
    change: EventEmitter<any>;
    currentIndexList: number[];
    lastCurrentIndexList: number[];
    groupsRectList: any[];
    touchOrMouse: {
        isTouchable: boolean;
        isMouseDown: boolean;
    };
    draggingInfo: {
        isDragging: boolean;
        groupIndex: any;
        startPageY: any;
    };
    itemPerDegree: number;
    safeDoTimeoutId: any;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setGroupData(gIndex: any, groupData: any): void;
    getInitialCurrentIndexList(): number[];
    safeGetRectsBindEvents(): void;
    getGroupsRectList(): void;
    eventsRegister(): void;
    addEventsForElement(el: any): void;
    triggerMiddleLayerGroupClick(gIndex: any): void;
    triggerAboveLayerClick(ev: any, gIndex: any): void;
    triggerMiddleLayerClick(ev: any, gIndex: any): void;
    triggerBelowLayerClick(ev: any, gIndex: any): void;
    getTouchInfo(ev: any): any;
    getGroupIndexBelongsEvent(ev: any): number;
    handleEventClick(ev: any): void;
    handleStart(ev: any): void;
    handleMove(ev: any): void;
    handleEnd(ev: any): void;
    handleCancel(ev: any): void;
    handleWheel(ev: any): void;
    setCurrentIndexOnWheel(ev: any): void;
    setCurrentIndexOnMove(ev: any): void;
    correctionAfterDragging(ev: any): void;
    correctionCurrentIndex(ev: any, gIndex: any): void;
    isCurrentItem(gIndex: any, iIndex: any): boolean;
    getCurrentIndexList(): number[];
    getGroupClass(gIndex: any): string[];
    getItemClass(gIndex: any, iIndex: any, isDivider?: boolean): any[];
    getItemStyle(gIndex: any, iIndex: any): {
        transform: string;
        opacity: string;
    } | {
        transform: string;
    };
}
